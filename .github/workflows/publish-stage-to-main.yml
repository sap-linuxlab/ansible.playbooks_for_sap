---
name: Publish Stage branch to Main

on:
  # Runs on merged pull_request: to stage branch
  pull_request:
    branches:
      - stage
    types:
      - closed

  # Enable manual start button
  workflow_dispatch:

jobs:
  sync:
    name: 'Publish Stage branch to Main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch stage
        uses: actions/checkout@v4
        with:
          path: repo_playbooks_stage
          ref: stage

      - name: Checkout branch main
        uses: actions/checkout@v4
        with:
          path: repo_playbooks_main
          ref: main

      - name: Remove internal scenarios from publishing
        working-directory: repo_playbooks_stage
        run: |
          shopt -s nullglob # Ensures that empty glob results are empty

          # Loop through all deploy_scenarios and supported special_actions
          for dir in ./deploy_scenarios/* ./special_actions/*; do
            extravars_file="$dir/ansible_extravars.yml"

            # Check if the ansible_extravars.yml file exists
            if [ -f "$extravars_file" ]; then
              # Check if the file contains "sap_playbook_internal: true"
              if grep -q "sap_playbook_internal: true" "$extravars_file"; then
                rm -rf "$dir"
              fi  # string is present
            fi  # extravars file exists
          done
 
          shopt -u nullglob # Revert nullglob to its default behavior

      - name: Copy shared files to scenarios
        working-directory: repo_playbooks_stage
        run: |
          shopt -s nullglob  # Ensures that empty results are empty

          # Update path in interactive tasks
          sed -i 's/..\/..\/common_fragments\/tasks\//optional\//' ./common_fragments/tasks/interactive/*.yml ./common_fragments/tasks/interactive/*/*.yml

          # Loop through all deploy_scenarios and supported special_actions
          for dir in ./deploy_scenarios/* ./special_actions/*; do
            # Copy interactive tasks only if optional/ansible_extravars_interactive.yml is present.
            interactive_vars="$dir"/optional/ansible_extravars_interactive.yml
            if [ -f "$interactive_vars" ]; then
              # Copy tasks
              cp -r ./common_fragments/tasks/* $dir/optional/

              # Update path to interactive tasks in playbooks
              sed -i 's/..\/..\/common_fragments\/tasks\//optional\//' $dir/ansible_playbook.yml
            fi  # interactive_vars exists

            # Copy ansible_requirements if it does not exist
            ansible_requirements="$dir"/ansible_requirements.yml
            if [ ! -f "$ansible_requirements" ]; then
              cp ./common_fragments/ansible_requirements.yml $dir/
            fi  # ansible_requirements not exists
          done

          shopt -u nullglob

      - name: Append shared fragments to deploy_scenarios files
        working-directory: repo_playbooks_stage
        run: |
          # Loop through all deploy_scenarios and supported special_actions
          for dir in ./deploy_scenarios/* ./special_actions/*; do

            # Loop through all valid extravars files
            for file in "$dir"/ansible_extravars_*_base.yml; do
              if [[ -f "$file" ]]; then
                # Extract platform name using basename of file
                platform=$(basename "$file" | sed 's/ansible_extravars_\(.*\)_base\.yml/\1/')
                
                # Define files for appending
                fragment_vars="common_fragments/vars/platform_vars_${platform}.yml"
                fragment_images="common_fragments/vars/platform_images_${platform}.yml"
                scenario_spec="$dir"/ansible_extravars_"$platform"_spec.yml
                interactive_vars="$dir"/optional/ansible_extravars_interactive.yml

                # Append shared platform vars fragment when it exists
                if [ -f "$fragment_vars" ]; then
                  sed 's/^---/\n/g' "$fragment_vars" >> "$file"
                fi  # if fragment_vars exists

                # Append scenario spec vars when it exists
                # Spec is also appended to interactive vars
                if [ -f "$scenario_spec" ]; then
                  sed 's/^---/\n/g' "$scenario_spec" >> "$file"
                  if [ -f "$interactive_vars" ]; then
                    sed 's/^---/\n/g' "$scenario_spec" >> "$interactive_vars"
                  fi  # interactive_vars exists
                  rm -f "$scenario_spec"
                fi  # if scenario_spec exists

                # Append shared platform image fragment when it exists
                # Images are also appended to interactive vars
                if [ -f "$fragment_images" ]; then
                  sed 's/^---/\n/g' "$fragment_images" >> "$file"
                  if [ -f "$interactive_vars" ]; then
                    sed 's/^---/\n/g' "$fragment_images" >> "$interactive_vars"
                  fi  # interactive_vars exists
                fi  # if fragment_images exists

                # Remove base files
                new_file="${file%_base.yml}.yml"
                mv "$file" "$new_file"
              fi  # if file exists

            done  # file loop
          done  # dir loop

          # Remove fragments after copying them
          git rm -rf ./common_fragments

      - name: Synchronize main with transformed stage
        run: |
          rsync --human-readable --itemize-changes --archive --delete --exclude '.git' repo_playbooks_stage/ repo_playbooks_main/ > rsync.log
          echo "--- rsync.log content (filtered) ---"
          cat rsync.log | grep -v '^[>.][df]\.\.t\.\.\.\.\.\.' || true

      - name: Check for changes
        working-directory: repo_playbooks_main
        id: check_changes
        run: |
          git add .
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Git changes detected. Proceeding with subsequent steps."
            echo "::set-output name=has_changes::true"
          else
            echo "No Git changes detected. Skipping subsequent steps."
            echo "::set-output name=has_changes::false"
          fi

      - name: Commit changes
        working-directory: repo_playbooks_main
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          PR_AUTHOR_NAME=""
          PR_AUTHOR_EMAIL=""

          # Check if the trigger was a pull_request and it was merged
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            PR_AUTHOR_NAME="${{ github.event.pull_request.user.login }}"
            # Construct a no-reply email for the PR author
            PR_AUTHOR_EMAIL="${{ github.event.pull_request.user.id }}+${PR_AUTHOR_NAME}@users.noreply.github.com"
            echo "Using PR author: $PR_AUTHOR_NAME <$PR_AUTHOR_EMAIL>"
          else
            # Default to github-actions[bot] for manual triggers or other non-PR scenarios
            PR_AUTHOR_NAME="github-actions[bot]"
            PR_AUTHOR_EMAIL="41898282+github-actions[bot]@users.noreply.github.com"
            echo "Using default author: $PR_AUTHOR_NAME <$PR_AUTHOR_EMAIL>"
          fi

          git config user.name "$PR_AUTHOR_NAME"
          git config user.email "$PR_AUTHOR_EMAIL"

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_NUMBER=$(echo ${{ github.event.pull_request.number }})
          else
            PR_NUMBER="manual"
          fi
          git commit -m "Merge changes from stage to main branch (PR #$PR_NUMBER)."

      - name: Push changes
        working-directory: repo_playbooks_main
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin main --force
