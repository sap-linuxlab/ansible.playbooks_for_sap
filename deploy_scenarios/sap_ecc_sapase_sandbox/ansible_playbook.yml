---
# Ansible Playbook for SAP Business Suite with SAP ASE Sandbox installation

# Use include_role / include_tasks inside Ansible Task block, instead of using roles declaration or Task block with import_roles.
# This ensures Ansible Roles, and the tasks within, will be parsed in sequence instead of parsing at Playbook initialization.


#### Interactive Mode ####
# Interactive mode section can be safely removed without impact if all mandatory variables are provided.
- name: Ansible Play to Interactively gather all mandatory variables
  hosts: localhost
  gather_facts: false
  pre_tasks:

    - name: Block for collection for interactive prompts
      when:
        - sap_playbook_interactive_product is defined and sap_playbook_interactive_product | length > 0
        - sap_playbook_interactive_database is defined and sap_playbook_interactive_database | length > 0
        - sap_playbook_interactive_layout is defined and sap_playbook_interactive_layout | length > 0
      block:
        - name: Check if interactive tasks are available
          ansible.builtin.stat:
            path: ../../common_fragments/tasks/interactive/main.yml
          register: sap_playbook_interactive_tasks_availability
          ignore_errors: true

        - name: Execute collection of interactive inputs
          ansible.builtin.include_tasks:
            file: ../../common_fragments/tasks/interactive/main.yml
          when: sap_playbook_interactive_tasks_availability.stat.exists


- name: Ansible Play to validate the variables
  hosts: localhost
  # gather_facts is required for loop over hostvars
  tasks:

    - name: Fail if sap_vm_provision_iac_type is undefined or invalid
      ansible.builtin.fail:
        msg: |
          The variable 'sap_vm_provision_iac_type' is undefined or invalid.
          Available options: ansible, ansible_to_terraform, existing_hosts
      when: sap_vm_provision_iac_type is not defined or sap_vm_provision_iac_type not in ['ansible', 'ansible_to_terraform', 'existing_hosts']

    - name: Fail if sap_vm_provision_iac_platform is undefined or invalid
      ansible.builtin.fail:
        msg: |
          The variable 'sap_vm_provision_iac_platform' is undefined or invalid.
          Available options: aws_ec2_vs, gcp_ce_vm, msazure_vm, ibmcloud_powervs, ibmcloud_vs, ibmpowervm_vm, kubevirt_vm, ovirt_vm, vmware_vm, existing_hosts
      when: sap_vm_provision_iac_platform is not defined or sap_vm_provision_iac_platform not in
        ['aws_ec2_vs', 'gcp_ce_vm', 'msazure_vm', 'ibmcloud_powervs', 'ibmcloud_vs', 'ibmpowervm_vm', 'kubevirt_vm', 'ovirt_vm', 'vmware_vm', 'existing_hosts']

    - name: Identify variables with placeholder values or empty passwords  # noqa: ignore-errors
      ansible.builtin.set_fact:
        sap_playbook_placeholder_vars: "{{ sap_playbook_placeholder_vars | d([]) + [item.key]
          if item.value in ['ENTER_STRING_VALUE_HERE']
          else sap_playbook_placeholder_vars | d([]) }}"
        sap_playbook_empty_password_vars: "{{ sap_playbook_empty_password_vars | d([]) + [item.key]
          if 'password' in item.key and (item.value is none or not item.value is string or item.value == '')
          else sap_playbook_empty_password_vars | d([]) }}"
      loop: "{{ hostvars['localhost'] | dict2items | selectattr('key', 'match', '^(__)?sap_') | rejectattr('key', 'match', '.*_register$') | list }}"
      no_log: true
      ignore_errors: true  # Ignore errors for variables defined later during runtime

    - name: Report SAP variable validation failures
      ansible.builtin.fail:
        msg: |
          Please address the following issues before re-running the playbook:
          {% if sap_playbook_placeholder_vars | length > 0 %}
          - Placeholder values found for variable(s):
            {% for item in sap_playbook_placeholder_vars %}
            {{ item }}
            {% endfor %}

          {% endif %}
          {% if sap_playbook_empty_password_vars | length > 0 %}
          - Empty or invalid values found for password variable(s):
            {% for item in sap_playbook_empty_password_vars %}
            {{ item }}
            {% endfor %}
          {% endif %}
      when:
        - sap_playbook_placeholder_vars | d([]) | length > 0 or sap_playbook_empty_password_vars | d([]) | length > 0


#### Begin Infrastructure-as-Code provisioning ####
- name: Ansible Play to create dynamic inventory group for provisioning
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Fail if 'sap_vm_provision_{{ sap_vm_provision_iac_platform }}_host_specifications_dictionary' is undefined or empty
      ansible.builtin.fail:
        msg: |
          Variable 'sap_vm_provision_{{ sap_vm_provision_iac_platform }}_host_specifications_dictionary' is undefined or empty.
      when:
        - "'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary' not in vars
          or lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform + '_host_specifications_dictionary') | length == 0"

    - name: Set fact with selected host dictionary
      ansible.builtin.set_fact:
        sap_playbook_host_dictionary:
          "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform
            + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan] }}"

    - name: Create dynamic inventory group for Ansible Role sap_vm_provision
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: sap_vm_provision_target_inventory_group
      loop: "{{ sap_playbook_host_dictionary.keys() }}"
      when: sap_vm_provision_iac_type in ['ansible', 'ansible_to_terraform']


# Ansible Play target hosts pattern, use Inventory Group created by previous Ansible Task (add_host)
- name: Ansible Play to provision hosts for SAP
  hosts: sap_vm_provision_target_inventory_group
  gather_facts: false
  tasks:

    # Ensure that all sap_* or __sap_* variables set in Interactive Mode are appended to the target inventory Group
    - name: Assign all relevant facts from execution node before provisioning  # noqa: ignore-errors
      ansible.builtin.set_fact:
        "{{ item.key }}": "{{ item.value }}"
        cacheable: true
      loop: "{{ hostvars['localhost'] | dict2items | selectattr('key', 'match', '^(__)?sap_') | list }}"
      no_log: true
      ignore_errors: true  # Ignore errors for variables defined later during runtime

    - name: Execute Ansible Role sap_vm_provision
      ansible.builtin.include_role:
        name: community.sap_infrastructure.sap_vm_provision
      when:
        - sap_vm_provision_iac_type in ['ansible', 'ansible_to_terraform']
        - sap_vm_provision_iac_platform != 'existing_hosts'

- name: Ansible Play to set sap variables on provisioned hosts
  hosts: sap_vm_provision_target_inventory_group  # noqa: ignore-errors
  gather_facts: false
  tasks:

    - name: Assign all relevant facts from execution node after provisioning  # noqa: ignore-errors
      ansible.builtin.set_fact:
        "{{ item.key }}": "{{ item.value }}"
        cacheable: true
      loop: "{{ hostvars['localhost'] | dict2items | selectattr('key', 'match', '^(__)?sap_') | list }}"
      no_log: true
      ignore_errors: true  # Ignore errors for variables defined later during runtime


#### VM storage filesystem setup ####
- name: Ansible Play for hosts storage setup
  hosts: nwas_pas
  become: true
  any_errors_fatal: true
  max_fail_percentage: 0
  tasks:

    # Use inventory_hostname_short to retrieve host specification from the dictionary.
    # While ansible_hostname will work for Ansible only, using Ansible>Terraform may see ansible_hostname as 'localhost' and fail
    - name: Execute Ansible Role sap_storage_setup
      ansible.builtin.include_role:
        name: community.sap_install.sap_storage_setup
      vars:
        sap_playbook_host_dictionary_hostname:
          "{{ lookup('ansible.builtin.vars', 'sap_vm_provision_' + sap_vm_provision_iac_platform
           + '_host_specifications_dictionary')[sap_vm_provision_host_specification_plan][inventory_hostname_short] }}"
        sap_storage_setup_sid: "{{ sap_playbook_host_dictionary_hostname['sap_storage_setup_sid'] | d('') }}"
        sap_storage_setup_nwas_abap_ascs_instance_nr: "{{ sap_playbook_host_dictionary_hostname['sap_storage_setup_nwas_abap_ascs_instance_nr'] | d('') }}"
        sap_storage_setup_nwas_abap_pas_instance_nr: "{{ sap_playbook_host_dictionary_hostname['sap_storage_setup_nwas_abap_pas_instance_nr'] | d('') }}"
        sap_storage_setup_nwas_abap_aas_instance_nr: "{{ sap_playbook_host_dictionary_hostname['sap_storage_setup_nwas_abap_aas_instance_nr'] | d('') }}"
        sap_storage_setup_host_type: "{{ sap_playbook_host_dictionary_hostname['sap_storage_setup_host_type'] | list }}"


#### Begin downloading SAP software installation media to hosts ####
- name: Ansible Play for downloading installation media
  hosts: nwas_pas
  become: true
  any_errors_fatal: true
  max_fail_percentage: 0
  tasks:

    # SAP software download will only occur if the 'community.sap_launchpad' collection is installed.
    # Playbook will continue without the collection, assuming SAP software is already available.
    - name: Check availability of sap_launchpad collection on execution node
      delegate_to: localhost
      become: false  # Enables usage of Python VENV
      ansible.builtin.command:
        cmd: ansible-galaxy collection list
      register: sap_playbook_collection_list_output

    - name: Execute Ansible Role sap_software_download
      ansible.builtin.include_role:
        name: community.sap_launchpad.sap_software_download
      vars:
        sap_software_download_suser_id: "{{ sap_id_user }}"
        sap_software_download_suser_password: "{{ sap_id_user_password }}"
        sap_software_download_directory: "{{ sap_install_media_detect_source_directory }}"
        sap_software_download_deduplicate: first
        sap_software_download_files: "{{ sap_software_install_dictionary[sap_software_product]
          ['softwarecenter_search_list_' ~ ansible_architecture] }}"
      when: sap_playbook_collection_list_output.stdout_lines | select('search', 'community.sap_launchpad')


#### Begin SAP software hosts preparation ####
- name: Ansible Play for preparing all SAP software hosts
  hosts: nwas_pas
  become: true
  any_errors_fatal: true
  max_fail_percentage: 0
  tasks:

    - name: Execute Ansible Role sap_general_preconfigure
      ansible.builtin.include_role:
        name: community.sap_install.sap_general_preconfigure

    - name: Execute Ansible Role sap_netweaver_preconfigure
      ansible.builtin.include_role:
        name: community.sap_install.sap_netweaver_preconfigure


#### Begin SAP software installations ####
- name: Ansible Play for SAP ASE Database Server and SAP NetWeaver Application Server installation - ABAP Central Services (ASCS), Database Load, Primary Application Server (PAS)
  hosts: nwas_pas
  become: true
  any_errors_fatal: true
  max_fail_percentage: 0
  tasks:

    - name: Execute Ansible Role sap_install_media_detect
      ansible.builtin.include_role:
        name: community.sap_install.sap_install_media_detect
      vars:
        sap_install_media_detect_swpm: true
        sap_install_media_detect_hostagent: true
        sap_install_media_detect_igs: true
        sap_install_media_detect_kernel: true
        sap_install_media_detect_webdisp: false
        sap_install_media_detect_db: "sapase"
        sap_install_media_detect_db_client: "sapase"
        sap_install_media_detect_export: "sapecc"

    # Install SAP ASE and SAP NetWeaver via Ansible Role sap_swpm
    - name: Execute Ansible Role sap_swpm
      ansible.builtin.include_role:
        name: community.sap_install.sap_swpm
      vars:
        sap_swpm_templates_product_input: "{{ sap_software_product }}"
